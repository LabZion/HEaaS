// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: fhe.proto

package fhe

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type KeyPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretKey []byte `protobuf:"bytes,1,opt,name=secretKey,proto3" json:"secretKey,omitempty"`
	PublicKey []byte `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
}

func (x *KeyPair) Reset() {
	*x = KeyPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fhe_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyPair) ProtoMessage() {}

func (x *KeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_fhe_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyPair.ProtoReflect.Descriptor instead.
func (*KeyPair) Descriptor() ([]byte, []int) {
	return file_fhe_proto_rawDescGZIP(), []int{0}
}

func (x *KeyPair) GetSecretKey() []byte {
	if x != nil {
		return x.SecretKey
	}
	return nil
}

func (x *KeyPair) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type StoreKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	KeyPair *KeyPair `protobuf:"bytes,2,opt,name=keyPair,proto3" json:"keyPair,omitempty"`
}

func (x *StoreKeyRequest) Reset() {
	*x = StoreKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fhe_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreKeyRequest) ProtoMessage() {}

func (x *StoreKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fhe_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreKeyRequest.ProtoReflect.Descriptor instead.
func (*StoreKeyRequest) Descriptor() ([]byte, []int) {
	return file_fhe_proto_rawDescGZIP(), []int{1}
}

func (x *StoreKeyRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *StoreKeyRequest) GetKeyPair() *KeyPair {
	if x != nil {
		return x.KeyPair
	}
	return nil
}

type FetchPublicKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *FetchPublicKeyRequest) Reset() {
	*x = FetchPublicKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fhe_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchPublicKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchPublicKeyRequest) ProtoMessage() {}

func (x *FetchPublicKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fhe_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchPublicKeyRequest.ProtoReflect.Descriptor instead.
func (*FetchPublicKeyRequest) Descriptor() ([]byte, []int) {
	return file_fhe_proto_rawDescGZIP(), []int{2}
}

func (x *FetchPublicKeyRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

var File_fhe_proto protoreflect.FileDescriptor

var file_fhe_proto_rawDesc = []byte{
	0x0a, 0x09, 0x66, 0x68, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x66, 0x68, 0x65,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x45, 0x0a,
	0x07, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x22, 0x4b, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x07, 0x6b, 0x65, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x66, 0x68, 0x65,
	0x2e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x69,
	0x72, 0x22, 0x29, 0x0a, 0x15, 0x46, 0x65, 0x74, 0x63, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x32, 0xfc, 0x01, 0x0a,
	0x03, 0x46, 0x48, 0x45, 0x12, 0x35, 0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0c, 0x2e, 0x66, 0x68,
	0x65, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x2e, 0x66, 0x68, 0x65, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0e, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x2e, 0x66, 0x68, 0x65, 0x2e,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x66, 0x68, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x50,
	0x61, 0x69, 0x72, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x16, 0x46, 0x65, 0x74, 0x63, 0x68, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x12,
	0x1a, 0x2e, 0x66, 0x68, 0x65, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x66, 0x68,
	0x65, 0x2e, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x22, 0x00, 0x42, 0x2a, 0x0a, 0x1a, 0x63,
	0x6f, 0x6d, 0x2e, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e,
	0x68, 0x65, 0x61, 0x61, 0x73, 0x2e, 0x66, 0x68, 0x65, 0x42, 0x03, 0x46, 0x48, 0x45, 0x50, 0x01,
	0x5a, 0x05, 0x2e, 0x3b, 0x66, 0x68, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fhe_proto_rawDescOnce sync.Once
	file_fhe_proto_rawDescData = file_fhe_proto_rawDesc
)

func file_fhe_proto_rawDescGZIP() []byte {
	file_fhe_proto_rawDescOnce.Do(func() {
		file_fhe_proto_rawDescData = protoimpl.X.CompressGZIP(file_fhe_proto_rawDescData)
	})
	return file_fhe_proto_rawDescData
}

var file_fhe_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_fhe_proto_goTypes = []interface{}{
	(*KeyPair)(nil),               // 0: fhe.KeyPair
	(*StoreKeyRequest)(nil),       // 1: fhe.StoreKeyRequest
	(*FetchPublicKeyRequest)(nil), // 2: fhe.FetchPublicKeyRequest
	(*empty.Empty)(nil),           // 3: google.protobuf.Empty
}
var file_fhe_proto_depIdxs = []int32{
	0, // 0: fhe.StoreKeyRequest.keyPair:type_name -> fhe.KeyPair
	3, // 1: fhe.FHE.GenerateKey:input_type -> google.protobuf.Empty
	1, // 2: fhe.FHE.StoreKey:input_type -> fhe.StoreKeyRequest
	2, // 3: fhe.FHE.FetchPublicKey:input_type -> fhe.FetchPublicKeyRequest
	2, // 4: fhe.FHE.FetchPublicKeyBySHA256:input_type -> fhe.FetchPublicKeyRequest
	0, // 5: fhe.FHE.GenerateKey:output_type -> fhe.KeyPair
	3, // 6: fhe.FHE.StoreKey:output_type -> google.protobuf.Empty
	0, // 7: fhe.FHE.FetchPublicKey:output_type -> fhe.KeyPair
	0, // 8: fhe.FHE.FetchPublicKeyBySHA256:output_type -> fhe.KeyPair
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_fhe_proto_init() }
func file_fhe_proto_init() {
	if File_fhe_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fhe_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fhe_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fhe_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchPublicKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fhe_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fhe_proto_goTypes,
		DependencyIndexes: file_fhe_proto_depIdxs,
		MessageInfos:      file_fhe_proto_msgTypes,
	}.Build()
	File_fhe_proto = out.File
	file_fhe_proto_rawDesc = nil
	file_fhe_proto_goTypes = nil
	file_fhe_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FHEClient is the client API for FHE service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FHEClient interface {
	// KeyManagement
	// GenerateKey Create a key pair
	GenerateKey(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*KeyPair, error)
	// StoreKey Store a key pair
	StoreKey(ctx context.Context, in *StoreKeyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// FetchPublicKey Fetch a key pair by key string
	FetchPublicKey(ctx context.Context, in *FetchPublicKeyRequest, opts ...grpc.CallOption) (*KeyPair, error)
	// FetchPublicKeyBySHA256 Fetch a key pair by sha256 digest string
	FetchPublicKeyBySHA256(ctx context.Context, in *FetchPublicKeyRequest, opts ...grpc.CallOption) (*KeyPair, error)
}

type fHEClient struct {
	cc grpc.ClientConnInterface
}

func NewFHEClient(cc grpc.ClientConnInterface) FHEClient {
	return &fHEClient{cc}
}

func (c *fHEClient) GenerateKey(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*KeyPair, error) {
	out := new(KeyPair)
	err := c.cc.Invoke(ctx, "/fhe.FHE/GenerateKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fHEClient) StoreKey(ctx context.Context, in *StoreKeyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/fhe.FHE/StoreKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fHEClient) FetchPublicKey(ctx context.Context, in *FetchPublicKeyRequest, opts ...grpc.CallOption) (*KeyPair, error) {
	out := new(KeyPair)
	err := c.cc.Invoke(ctx, "/fhe.FHE/FetchPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fHEClient) FetchPublicKeyBySHA256(ctx context.Context, in *FetchPublicKeyRequest, opts ...grpc.CallOption) (*KeyPair, error) {
	out := new(KeyPair)
	err := c.cc.Invoke(ctx, "/fhe.FHE/FetchPublicKeyBySHA256", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FHEServer is the server API for FHE service.
type FHEServer interface {
	// KeyManagement
	// GenerateKey Create a key pair
	GenerateKey(context.Context, *empty.Empty) (*KeyPair, error)
	// StoreKey Store a key pair
	StoreKey(context.Context, *StoreKeyRequest) (*empty.Empty, error)
	// FetchPublicKey Fetch a key pair by key string
	FetchPublicKey(context.Context, *FetchPublicKeyRequest) (*KeyPair, error)
	// FetchPublicKeyBySHA256 Fetch a key pair by sha256 digest string
	FetchPublicKeyBySHA256(context.Context, *FetchPublicKeyRequest) (*KeyPair, error)
}

// UnimplementedFHEServer can be embedded to have forward compatible implementations.
type UnimplementedFHEServer struct {
}

func (*UnimplementedFHEServer) GenerateKey(context.Context, *empty.Empty) (*KeyPair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateKey not implemented")
}
func (*UnimplementedFHEServer) StoreKey(context.Context, *StoreKeyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreKey not implemented")
}
func (*UnimplementedFHEServer) FetchPublicKey(context.Context, *FetchPublicKeyRequest) (*KeyPair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPublicKey not implemented")
}
func (*UnimplementedFHEServer) FetchPublicKeyBySHA256(context.Context, *FetchPublicKeyRequest) (*KeyPair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPublicKeyBySHA256 not implemented")
}

func RegisterFHEServer(s *grpc.Server, srv FHEServer) {
	s.RegisterService(&_FHE_serviceDesc, srv)
}

func _FHE_GenerateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FHEServer).GenerateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fhe.FHE/GenerateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FHEServer).GenerateKey(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FHE_StoreKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FHEServer).StoreKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fhe.FHE/StoreKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FHEServer).StoreKey(ctx, req.(*StoreKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FHE_FetchPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FHEServer).FetchPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fhe.FHE/FetchPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FHEServer).FetchPublicKey(ctx, req.(*FetchPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FHE_FetchPublicKeyBySHA256_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FHEServer).FetchPublicKeyBySHA256(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fhe.FHE/FetchPublicKeyBySHA256",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FHEServer).FetchPublicKeyBySHA256(ctx, req.(*FetchPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FHE_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fhe.FHE",
	HandlerType: (*FHEServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateKey",
			Handler:    _FHE_GenerateKey_Handler,
		},
		{
			MethodName: "StoreKey",
			Handler:    _FHE_StoreKey_Handler,
		},
		{
			MethodName: "FetchPublicKey",
			Handler:    _FHE_FetchPublicKey_Handler,
		},
		{
			MethodName: "FetchPublicKeyBySHA256",
			Handler:    _FHE_FetchPublicKeyBySHA256_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fhe.proto",
}
